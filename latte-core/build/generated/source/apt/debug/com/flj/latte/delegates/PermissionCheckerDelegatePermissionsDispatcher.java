// This file was generated by PermissionsDispatcher. Do not modify!
package com.flj.latte.delegates;

import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.GrantableRequest;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class PermissionCheckerDelegatePermissionsDispatcher {
  private static final int REQUEST_STARTCAMERA = 0;

  private static final String[] PERMISSION_STARTCAMERA = new String[] {"android.permission.CAMERA"};

  private static final int REQUEST_STARTSCAN = 1;

  private static final String[] PERMISSION_STARTSCAN = new String[] {"android.permission.CAMERA"};

  private static GrantableRequest PENDING_STARTSCAN;

  private PermissionCheckerDelegatePermissionsDispatcher() {
  }

  static void startCameraWithCheck(PermissionCheckerDelegate target) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_STARTCAMERA)) {
      target.startCamera();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_STARTCAMERA)) {
        target.onCameraRationale(new StartCameraPermissionRequest(target));
      } else {
        target.requestPermissions(PERMISSION_STARTCAMERA, REQUEST_STARTCAMERA);
      }
    }
  }

  static void startScanWithCheck(PermissionCheckerDelegate target, BaseDelegate delegate) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_STARTSCAN)) {
      target.startScan(delegate);
    } else {
      PENDING_STARTSCAN = new StartScanPermissionRequest(target, delegate);
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_STARTSCAN)) {
        target.onCameraRationale(PENDING_STARTSCAN);
      } else {
        target.requestPermissions(PERMISSION_STARTSCAN, REQUEST_STARTSCAN);
      }
    }
  }

  static void onRequestPermissionsResult(PermissionCheckerDelegate target, int requestCode,
      int[] grantResults) {
    switch (requestCode) {
      case REQUEST_STARTCAMERA:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.startCamera();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_STARTCAMERA)) {
          target.onCameraNever();
        } else {
          target.onCameraDenied();
        }
      }
      break;
      case REQUEST_STARTSCAN:
      if (PermissionUtils.verifyPermissions(grantResults)) {
        if (PENDING_STARTSCAN != null) {
          PENDING_STARTSCAN.grant();
        }
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_STARTSCAN)) {
          target.onCameraNever();
        } else {
          target.onCameraDenied();
        }
      }
      PENDING_STARTSCAN = null;
      break;
      default:
      break;
    }
  }

  private static final class StartCameraPermissionRequest implements PermissionRequest {
    private final WeakReference<PermissionCheckerDelegate> weakTarget;

    private StartCameraPermissionRequest(PermissionCheckerDelegate target) {
      this.weakTarget = new WeakReference<PermissionCheckerDelegate>(target);
    }

    @Override
    public void proceed() {
      PermissionCheckerDelegate target = weakTarget.get();
      if (target == null) return;
      target.requestPermissions(PERMISSION_STARTCAMERA, REQUEST_STARTCAMERA);
    }

    @Override
    public void cancel() {
      PermissionCheckerDelegate target = weakTarget.get();
      if (target == null) return;
      target.onCameraDenied();
    }
  }

  private static final class StartScanPermissionRequest implements GrantableRequest {
    private final WeakReference<PermissionCheckerDelegate> weakTarget;

    private final BaseDelegate delegate;

    private StartScanPermissionRequest(PermissionCheckerDelegate target, BaseDelegate delegate) {
      this.weakTarget = new WeakReference<PermissionCheckerDelegate>(target);
      this.delegate = delegate;
    }

    @Override
    public void proceed() {
      PermissionCheckerDelegate target = weakTarget.get();
      if (target == null) return;
      target.requestPermissions(PERMISSION_STARTSCAN, REQUEST_STARTSCAN);
    }

    @Override
    public void cancel() {
      PermissionCheckerDelegate target = weakTarget.get();
      if (target == null) return;
      target.onCameraDenied();
    }

    @Override
    public void grant() {
      PermissionCheckerDelegate target = weakTarget.get();
      if (target == null) return;
      target.startScan(delegate);
    }
  }
}
